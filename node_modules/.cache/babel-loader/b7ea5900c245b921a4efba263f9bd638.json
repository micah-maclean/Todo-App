{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kikam\\\\Projects\\\\todo-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo.js\";\nimport Form from \"./components/Form.js\";\nimport FilterButton from \"./components/FilterButton.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-app\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: [/*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kikam/Projects/todo-app/src/App.js"],"names":["React","useState","nanoid","Todo","Form","FilterButton","App","props","tasks","setTasks","addTask","name","newTask","id","completed","toggleTaskCompleted","updatedTasks","map","task","taskList","tasksNoun","length","headingText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;;AAIA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAGlB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,KAAK,CAACC,KAAP,CAAlC;;AAEA,WAASE,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,UAAMC,OAAO,GAAG;AAAEC,MAAAA,EAAE,EAAE,UAAUX,MAAM,EAAtB;AAA0BS,MAAAA,IAAI,EAAEA,IAAhC;AAAsCG,MAAAA,SAAS,EAAE;AAAjD,KAAhB;AACAL,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,OAAX,CAAD,CAAR;AACD;;AAED,WAASG,mBAAT,CAA6BF,EAA7B,EAAiC;AAC/B,UAAMG,YAAY,GAAGR,KAAK,CAACS,GAAN,CAAUC,IAAI,IAAI;AACrC;AACA,UAAIL,EAAE,KAAKK,IAAI,CAACL,EAAhB,EAAoB;AAClB;AACA;AACA,eAAO,EAAC,GAAGK,IAAJ;AAAUJ,UAAAA,SAAS,EAAE,CAACI,IAAI,CAACJ;AAA3B,SAAP;AACD;;AACD,aAAOI,IAAP;AACD,KARoB,CAArB;AASAT,IAAAA,QAAQ,CAACO,YAAD,CAAR;AACD;;AAED,QAAMG,QAAQ,GAAGX,KAAK,CAACS,GAAN,CAAUC,IAAI,iBAC7B,QAAC,IAAD;AACI,IAAA,EAAE,EAAEA,IAAI,CAACL,EADb;AAEI,IAAA,IAAI,EAAEK,IAAI,CAACP,IAFf;AAGI,IAAA,SAAS,EAAEO,IAAI,CAACJ,SAHpB;AAII,IAAA,mBAAmB,EAAEC;AAJzB,KAKSG,IAAI,CAACL,EALd;AAAA;AAAA;AAAA;AAAA,UADe,CAAjB;AAWA,QAAMO,SAAS,GAAGD,QAAQ,CAACE,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AACA,QAAMC,WAAW,GAAI,GAAEH,QAAQ,CAACE,MAAO,IAAGD,SAAU,YAApD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEV;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAI,MAAA,EAAE,EAAC,cAAP;AAAA,gBACEY;AADF;AAAA;AAAA;AAAA;AAAA,YAPF,eAUE;AAAI,MAAA,IAAI,EAAC,MAAT;AAAgB,MAAA,SAAS,EAAC,WAA1B;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GArDQb,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo.js\"\nimport Form from \"./components/Form.js\";\nimport FilterButton from \"./components/FilterButton.js\";\n\n\n\nfunction App(props) {\n  \n  \n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks.map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        toggleTaskCompleted={toggleTaskCompleted}\n        key={task.id}\n      />\n    )\n  );\n  \n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todo-app\">\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n       {headingText}\n      </h2>\n      <ul role=\"list\" className=\"todo-list\">\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}